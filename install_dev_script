#!/bin/bash
RED='\033[0;31m'
Black='\033[0;30m'
Dark_Gray='\033[1;30m'
Light_Red='\033[1;31m'
Green='\033[0;32m'
Light_Green='\033[1;32m'
Brown_Orange='\033[0;33m'
Yellow='\033[1;33m'
Blue='\033[0;34m'
Light_Blue='\033[1;34m'
Purple='\033[0;35m'
Light_Purple='\033[1;35m'
Cyan='\033[0;36m'
Light_Cyan='\033[1;36m'
Light_Gray='\033[0;37m'
White='\033[1;37m'
NC='\033[0m' # No Color
valid=true
toolbox_version=1.18.7609
java_version=13.0.2.j9-adpt
mongo_version=4.4.2
mongo_compass_version=1.20.5
destination_directory=/opt
eclipse_jee_dir=/opt/eclipse-jee
spring_tools_suite_dir=/opt/spring-tools-suite
url_postgres_install=http://yallalabs.com/linux/how-to-install-and-use-postgresql-10-on-ubuntu-16-04/
usage="Script to install the main JAVA and Android development tools.

Usage:
$(basename "$0") [-h] [-i n]

where:
    -h  show help text
    -i  install the tools individually
        n:
          curl        => Curl is a tool to transfer data from or to a server
          wget        => Wget command is a Linux command line utility that helps us to download the files from the web
          nvm         => Node Version Manager
          yvm         => Yarn Version Manager
          docker      => Installing the docker and docker-compose
          sdk         => SDKMAN! is a tool for managing parallel versions of multiple Software Development Kits on most Unix based systems
          toolbox     => A control panel for your tools and projects (Jetbrains)
          dbeaver     => Free multi-platform database tool for developers, database administrators, analysts and all people who need to work with databases
          postgres    => PostgreSQL is a powerful, open source object-relational database system ( ORDBMS )
          umake       => Ubuntu Make is a command line tool which allows you to download the latest version of popular developer tools
          eclipse-jee => Installing eclipse jee by umake
          sts         => Install spring-tools-suite by umake
          vscode      => Visual Studio Code is a cross-platform text editor made available by Microsoft for web application development
          chrome      => O Google Chrome Ã© um navegador de internet, desenvolvido pela companhia Google
          mongodb     => MongoDB is a new database idea bringing Document Oriented Database concepts
          compass     => The GUI for MongoDB. Visually explore your data. Run ad hoc queries in seconds
          mysql       => MySQL is an open-source relational database that is free and widely used
          workbench   => MySQL Workbench is a unified visual tool for database architects, developers, and DBAs
"

function OPEN_BROWSER() {
    if which xdg-open >/dev/null; then
        nohup xdg-open $1
    elif which gnome-open >/dev/null; then
        nohup gnome-open $1
    fi
}

function CURL() {
    echo -e "${Yellow}Installing CURL...${NC}"
    sudo apt -y install curl
}

function WGET() {
    echo -e "${Yellow}Installing WGET...${NC}"
    sudo apt install -y software-properties-common apt-transport-https wget
}

function NVM() {
    echo -e "${Yellow}Node Version Manager${NC}"
    echo -e "${Yellow}Installing NVM (https://github.com/nvm-sh/nvm)...${NC}"
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
    echo -e "${Yellow}Executes commands from a file in the current shell.${NC}"
    source ~/.bashrc
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
    nvm --version
    nvm install --lts
    nvm install --latest-npm
}

function YVM() {
    echo -e "${Yellow}Yarn Version Manager${NC}"
    echo -e "${Yellow}Installing YVM (https://github.com/tophat/yvm)...${NC}"
    curl -s https://raw.githubusercontent.com/tophat/yvm/master/scripts/install.js | node
    echo -e "${Yellow}Executes commands from a file in the current shell.${NC}"
    source ~/.yvm/yvm.sh
    node ~/.yvm/yvm.js configure-shell
    yvm --version
    yvm update-self
    yvm install stable
    source ~/.yvm/yvm.sh
}

function SDKMAN_AND_MAVEN() {
    echo -e "${Yellow}The Software Development Kit Manager${NC}"
    echo -e "${Yellow}Installing SDKMAN (https://sdkman.io/)...${NC}"
    curl -s "https://get.sdkman.io" | bash
    echo -e "${Yellow}Updating the SDKMAN...${NC}"
    source "$HOME/.sdkman/bin/sdkman-init.sh"
    sdk selfupdate force
    source "$HOME/.sdkman/bin/sdkman-init.sh"
    sdk version
    echo -e "${Yellow}Installing 13 (${java_version})...${NC}"
    sdk install java ${java_version}
    echo -e "${Yellow}Setting Java ${java_version} as the default...${NC}"
    sdk default java ${java_version}
    echo -e "${Yellow}Installing latest version of Maven...${NC}"
    sdk install maven
}

function JETBRAINS_TOOLBOx_APP() {
    echo -e "${Yellow}Toolbox App - A control panel for your tools and projects${NC}"
    echo -e "${Yellow}Installing version ${toolbox_version}...${NC}"
    file=${destination_directory}/jetbrains-toolbox-${toolbox_version}.tar.gz
    if [ ! -f "$file" ]; then
        echo -e "${Yellow}File Download ${file}...${NC}"
        wget -c -P ${destination_directory} https://download.jetbrains.com/toolbox/jetbrains-toolbox-${toolbox_version}.tar.gz
    fi
    echo -e "${Yellow}Uncompressing file ${file}...${NC}"
    tar -xf ${file} -C ${destination_directory}
    echo -e "${Yellow}Running jetbrains-toolbox...${NC}"
    local=${pwd}
    cd ${destination_directory}/jetbrains-toolbox-${toolbox_version}
    pwd
    ./jetbrains-toolbox &
    ps -ef | grep jetbrains-toolbox
    killall -9 jetbrains-toolbox
    ps -ef | grep jetbrains-toolbox
    cd $local
    pwd
    echo -e "${Light_Green}Please, after installing jetbrains-toolbox, close the window.${NC}"
}

function POSTGRES() {
    echo -e "${Yellow}INSTALL AND USE POSTGRESQL 10 ON UBUNTU${NC}"
    echo -e "${Yellow}Add PostgreSQL apt repository...${NC}"
    echo 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main' >>/etc/apt/sources.list.d/pgdg.list
    echo -e "${Yellow}Import the repository signing key, and update the package lists...${NC}"
    wget -c -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    echo -e "${Yellow}Install PostgreSQL...${NC}"
    sudo apt update && sudo apt install -y postgresql-10
    echo -e "${Light_Green}Access the ${url_postgres_install} link to configure the password postgres user.${NC}"
    OPEN_BROWSER $url_postgres_install
    echo -e "${Yellow}Install pgAdmin III...${NC}"
    sudo apt install -y pgadmin3
}

function WORKBENCH() {
    sudo apt-get update
    echo -e "${Yellow}Install Mysql-Workbench...${NC}"
    sudo apt install mysql-workbench
}

function MYSQL() {
    sudo apt-get update
    echo -e "${Yellow}Install Mysql...${NC}"
    sudo apt-get install mysql-server
    while [ $valid ]; do
        echo -e "${Light_Blue}Do you want to install mysql-client? (y)es or (n)o${NC}"
        read value
        if [[ -z "$value" ]]; then
            echo -e "${RED}Please state (y)es or (n)o!"
        else
            break
        fi
    done
    if [ "$value" = "y" ] || [ "$value" = "yes" ]; then
        echo -e "${Yellow}Install mysql-client...${NC}"
        sudo apt-get install mysql-client
    fi
    echo -e "${Green}After installation is complete, the mysql_secure_installation utility runs. This utility prompts you to define the mysql root password and other security related options, including removing remote access to the root user and setting the root password.${NC}"
    echo -e "${Green}Allow remote access. Run the following command to allow remote access to the mysql server:${NC}"
    echo -e "${Light_Blue}sudo ufw allow mysql${NC}"
    echo -e "${Yellow}Start the MySQL service...${NC}"
    sudo systemctl start mysql
    while [ $valid ]; do
        echo -e "${Light_Blue}Do you want to launch on reboot? (y)es or (n)o${NC}"
        read value
        if [[ -z "$value" ]]; then
            echo -e "${RED}Please state (y)es or (n)o!"
        else
            break
        fi
    done
    if [ "$value" = "y" ] || [ "$value" = "yes" ]; then
        echo -e "${Yellow}Launch at reboot...${NC}"
        sudo systemctl enable mysql
    fi
    OPEN_BROWSER 'https://support.rackspace.com/how-to/installing-mysql-server-on-ubuntu/'
    echo -e "${Green}To reset the mysql root password, see the link:${NC}"
    echo -e "${Light_Blue}https://linuxconfig.org/how-to-reset-root-mysql-password-on-ubuntu-18-04-bionic-beaver-linux${NC}"
}

function UBUNTU_MAKE() {
    echo -e "${Yellow}Install ubuntu-make...${NC}"
    sudo add-apt-repository -y ppa:lyzardking/ubuntu-make
    sudo apt update
    sudo apt install -y ubuntu-make
}

function UMAKE_IDE_ECLIPSE_JEE() {
    echo -e "${Yellow}Installing eclipse-jee by ubuntu-make in ${eclipse_jee_dir}...${NC}"
    umake ide eclipse-jee ${eclipse_jee_dir}
    source ~/.profile
    echo -e "${Light_Green}After installing by umake, restart the system.${NC}"
}

function UMAKE_IDE_SPRING_TOOLS_SUITE() {
    echo -e "${Yellow}Installing spring-tools-suite by ubuntu-make in ${spring_tools_suite_dir}...${NC}"
    umake ide spring-tools-suite ${spring_tools_suite_dir}
    source ~/.profile
    echo -e "${Light_Green}After installing by umake, restart the system.${NC}"
}

function VSCODE() {
    echo -e "${Yellow}Installing Visual Studio Code on Ubuntu...${NC}"
    wget https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -
    echo -e "${Yellow}Enable the Visual Studio Code repository by typing...${NC}"
    sudo add-apt-repository -y "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
    echo -e "${Yellow}Once the repository is enabled, install the latest version of Visual Studio Code...${NC}"
    sudo apt update
    sudo apt install -y code
}

function DOCKER_DOCKER_COMPOSE() {
    echo -e "${Yellow}Installing DOCKER...${NC}"
    sudo apt-get install -y docker.io
    newgrp docker &
    sudo addgroup --system docker &
    sudo adduser $USER docker &
    echo -e "${Yellow}Install Docker Compose on Ubuntu...${NC}"
    sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    docker-compose --version
}

function CHROME() {
    echo -e "${Yellow}Install Google Chrome...${NC}"
    file=${destination_directory}/google-chrome-stable_current_amd64.deb
    if [ ! -f "$file" ]; then
        echo -e "${Yellow}File Download ${file}...${NC}"
        wget -c -P ${destination_directory} https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    fi
    sudo dpkg -i ${destination_directory}/google-chrome-stable_current_amd64.deb
}

function MONGODB() {
    echo -e "${Yellow}Install mongodb...${NC}"
    file=${destination_directory}/mongodb-linux-x86_64-ubuntu${mongo_version}.tgz
    if [ ! -f "$file" ]; then
        echo -e "${Yellow}File Download ${file}...${NC}"
        wget -c -P ${destination_directory} https://fastdl.mongodb.org/linux/mongodb-linux-aarch64-ubuntu2004-${mongo_version}.tgz
    fi
    mongo_dir=${destination_directory}/mongodb
    echo -e "${Yellow}Uncompressing file ${file} in ${mongo_dir}...${NC}"
    tar -xf ${file} -C ${destination_directory}
    if [ ! -d ${mongo_dir} ]; then
        echo -e "${Yellow}Renaming directory to ${mongo_dir}${NC}"
        mv ${destination_directory}/mongodb-linux-x86_64-ubuntu${mongo_version} ${mongo_dir}
    fi
    echo -e "${Yellow}Creating MONGODB_HOME=${mongo_dir} in ~/.bashrc...${NC}"
    echo "export MONGODB_HOME=${mongo_dir}:$MONGODB_HOME" >>~/.bashrc
    if [ ! -L /usr/local/bin/mongod ]; then
        echo -e "${Yellow}Creating symbolic link to executable ${mongo_dir}/bin/mongod in /usr/local/bin...${NC}"
        sudo ln -s ${mongo_dir}/bin/mongod /usr/local/bin
        source ~/.bashrc
    fi
    DIR_DATA=/data
    DIR_DATA_DB=/data/db
    if [ ! -d ${DIR_DATA} ]; then
        echo -e "${Yellow}Creating directory ${DIR_DATA}...${NC}"
        $(sudo mkdir ${DIR_DATA})
    fi
    if [ ! -d ${DIR_DATA_DB} ]; then
        echo -e "${Yellow}Creating directory ${DIR_DATA_DB}...${NC}"
        $(sudo mkdir ${DIR_DATA_DB})
    fi
    echo -e "${Yellow}Giving permission in ${DIR_DATA}...${NC}"
    sudo chown $USER:root ${DIR_DATA} -R
    echo -e "${Yellow}Permission in folder ${DIR_DATA}...${NC}"
    sudo chmod 2770 ${DIR_DATA}/ -R
    echo -e "${Yellow}Install libcurl3...${NC}"
    sudo apt-get install -y libcurl3
}

function MONGODB_COMPASS() {
    echo -e "${Yellow}Install mongodb compass...${NC}"
    file=${destination_directory}/mongodb-compass_${mongo_compass_version}_amd64.deb
    if [ ! -f "$file" ]; then
        echo -e "${Yellow}File Download ${file}...${NC}"
        wget -c -P ${destination_directory} https://downloads.mongodb.com/compass/mongodb-compass_${mongo_compass_version}_amd64.deb
    fi
    sudo dpkg -i ${file}
}

function DBEAVER() {
    echo -e "${Yellow}Install DBeaver Community...${NC}"
    wget -O - https://dbeaver.io/debs/dbeaver.gpg.key | sudo apt-key add -
    echo "deb https://dbeaver.io/debs/dbeaver-ce /" | sudo tee /etc/apt/sources.list.d/dbeaver.list
    sudo apt update
    sudo apt -y  install dbeaver-ce
    apt policy  dbeaver-ce
}

function ALL() {
    while [ $valid ]; do
        echo -e "${Light_Blue}Do you want to install all the tools? (y)es or (n)o${NC}"
        read value
        if [[ -z "$value" ]]; then
            echo -e "${RED}Please state (y)es or (n)o!"
        else
            break
        fi
    done

    if [ "$value" = "y" ] || [ "$value" = "yes" ]; then
        echo -e "${Yellow}Enter the SUDO password when prompted.${NC}"
        sudo apt update
        sudo apt upgrade
        CURL
        WGET
        NVM
        YVM
        SDKMAN_AND_MAVEN
        UBUNTU_MAKE
        UMAKE_IDE_ECLIPSE_JEE
        UMAKE_IDE_SPRING_TOOLS_SUITE
        DBEAVER
        POSTGRES
        JETBRAINS_TOOLBOx_APP
        VSCODE
        CHROME
        DOCKER_DOCKER_COMPOSE
        MONGODB
        MONGODB_COMPASS
        MYSQL
        WORKBENCH
        sudo apt -y autoremove
        echo -e "${Yellow}FIM.${NC}"
    else
        echo -e "${usage}" >&2
        exit 1
    fi
}

if [ "$#" -eq 2 ]; then
    while getopts ':hi:' option; do
        case "$option" in
        h)
            echo -e "${usage}"
            exit
            ;;
        i)
            case $OPTARG in
            "curl") CURL ;;
            "wget") WGET ;;
            "nvm") NVM ;;
            "yvm") YVM ;;
            "sdk") SDKMAN_AND_MAVEN ;;
            "toolbox") JETBRAINS_TOOLBOx_APP ;;
            "dbeaver") DBEAVER ;;
            "postgres") POSTGRES ;;
            "umake") UBUNTU_MAKE ;;
            "eclipse-jee") UMAKE_IDE_ECLIPSE_JEE ;;
            "sts") UMAKE_IDE_SPRING_TOOLS_SUITE ;;
            "vscode") VSCODE ;;
            "chrome") CHROME ;;
            "docker") DOCKER_DOCKER_COMPOSE ;;
            "mongodb") MONGODB ;;
            "compass") MONGODB_COMPASS ;;
            "mysql") MYSQL ;;
            "workbench") WORKBENCH ;;
            *) echo "Invalid Option!" ;;
            esac
            ;;
        :)
            printf "Missing argument for -%s\n" "$OPTARG" >&2
            echo -e "${usage}" >&2
            exit 1
            ;;
        \?)
            printf "${RED}Illegal option: -%s\n${NC}" "$OPTARG" >&2
            echo -e "${usage}" >&2
            exit 1
            ;;
        esac
    done
    shift $((OPTIND - 1))
else
    if [ "$#" -eq 1 ]; then
        if [ "$1" = "-h" ]; then
            echo -e "${usage}" >&2
            exit 1
        else
            printf "Missing argument for -%s\n" "$OPTARG" >&2
            echo -e "${usage}" >&2
            exit 1
        fi
    else
        ALL
    fi
fi
